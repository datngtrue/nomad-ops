package domain

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"database/sql"
	"time"

	"github.com/pocketbase/pocketbase/core"
	"github.com/pocketbase/pocketbase/forms"
	"github.com/pocketbase/pocketbase/models"
	"github.com/pocketbase/pocketbase/models/schema"
	"github.com/pocketbase/pocketbase/tools/types"
)

type EventType string

const (
	EventTypeSynced  EventType = "synced"
	EventTypeUpdated EventType = "updated"
	EventTypeCreated EventType = "created"
	EventTypeDeleted EventType = "deleted"
	EventTypePaused  EventType = "paused"
	EventTypeResumed EventType = "resumed"
)

type Event struct {

	// id
	// Read Only: true
	ID string `json:"id,omitempty"`

	// message
	// Required: true
	Message string `json:"message"`

	// source
	Source *Source `json:"source,omitempty"`

	// timestamp
	Timestamp time.Time `json:"timestamp,omitempty"`

	// type
	// Required: true
	Type EventType `json:"type"`
}

func initEventCollection(app core.App,
	srcCollection *models.Collection) (*models.Collection, error) {

	collection, err := app.Dao().FindCollectionByNameOrId("events")

	if err == sql.ErrNoRows {
		collection = &models.Collection{}
	}
	if err != nil && err != sql.ErrNoRows {
		return nil, err
	}

	form := forms.NewCollectionUpsert(app, collection)
	form.Name = "events"
	form.Type = models.CollectionTypeBase
	form.ListRule = types.Pointer("@request.auth.id != ''")
	form.ViewRule = types.Pointer("@request.auth.id != ''")
	form.CreateRule = types.Pointer("@request.auth.id != ''")
	form.UpdateRule = types.Pointer("@request.auth.id != ''")
	form.DeleteRule = types.Pointer("@request.auth.id != ''")

	addOrUpdateField(form, &schema.SchemaField{
		Name:     "message",
		Type:     schema.FieldTypeText,
		Required: true,
		Unique:   false,
		Options: &schema.TextOptions{
			Max: types.Pointer(500),
		},
	})
	addOrUpdateField(form, &schema.SchemaField{
		Name:     "type",
		Type:     schema.FieldTypeSelect,
		Required: true,
		Unique:   false,
		Options: &schema.SelectOptions{
			MaxSelect: 1,
			Values: []string{
				string(EventTypeCreated),
				string(EventTypeDeleted),
				string(EventTypePaused),
				string(EventTypeResumed),
				string(EventTypeSynced),
				string(EventTypeUpdated),
			},
		},
	})
	addOrUpdateField(form, &schema.SchemaField{
		Name:     "timestamp",
		Type:     schema.FieldTypeDate,
		Required: true,
	})
	addOrUpdateField(form, &schema.SchemaField{
		Name:     "source",
		Type:     schema.FieldTypeRelation,
		Required: true,
		Options: &schema.RelationOptions{
			MaxSelect:     types.Pointer(1),
			CollectionId:  srcCollection.Id,
			CascadeDelete: true,
		},
	})

	// validate and submit (internally it calls app.Dao().SaveCollection(collection) in a transaction)
	if err := form.Submit(); err != nil {
		return nil, err
	}
	return collection, nil
}
